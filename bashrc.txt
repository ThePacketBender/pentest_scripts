####    set variable $LAST each time a command execution is execute to store stdout
####    usage: echo "$LAST" > some.file
PROMPT_COMMAND='LAST="`cat /tmp/x`"; exec >/dev/tty; exec > >(tee /tmp/x)'

####	Default Luanch TMUX in any bash TTY except when running screen, reverse to set screen as default
####	*line should preceed aliases invocation
[[ $TERM != "screen" ]] && exec tmux

####	unified function to extract any archive calling the extension-appropriate program
function extract() {
 if [ -z "$1" ]; then
    # display usage
    echo "Usage: extract <path/to/file>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz|jar|docx>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
    return 1
 else
    for n in $@
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.tar.bz2|*.tar.gz|*.tar.xz|*.tar.lzip|*.tar.lzma|*.tar.lzop|*.tbz2|*.tgz|*.txz|*.tlzip|*.tlz|*.tzlop|*.tar) 
                        tar xvf "$n"		;;
            *.lzma)     unlzma ./"$n"		;;
			*.lz)		lzip -d ./"$n"		;;
            *.bz2)      bunzip2 ./"$n"		;;
            *.rar)      unrar x -ad ./"$n"	;;
            *.gz)       gunzip ./"$n"		;;
            *.zip|*.jar|*.war|*.doc|*.docx) unzip ./"$n"	;;
            *.z)        uncompress ./"$n"	;;
            *.7z|*.tar.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar|*.z|*.Z)
						7z x ./"$n"			;;
            *.xz)       unxz ./"$n"			;;
            *.exe)      cabextract ./"$n"	;;
			*.shar)		bash ./"$n"			;;
			*.sz)		snappy ./"$n"		;;	## https://github.com/klauspost/compress https://github.com/google/snappy
			*.a|*.ar|*.lib)  ar x ./"$n"		;;
            *)
                        echo "extract: '$n' - extension unknown"
                        return 1
                        ;;
          esac
      else
          echo "'$n' DNE"
          return 1
      fi
    done
fi
}
## grep for any archive file (mostly)
function agrep() {
	if [ -z "$2" ]; then
		echo "Usage: agrep pattern file.archive [file2.archive ,..]"
		return 1
	fi
	for n in ${@:2}
	do
		if [ -f "$n" ] ; then
			case "${n%,}" in
				*.tar.bz2|*.tar.gz|*.tar.xz|*.tar.lzip|*.tar.lzma|*.tar.lzop|*.tbz2|*.tgz|*.txz|*.tlzip|*.tlz|*.tz|*.tzlop|*.tar)
							tar xaf "$n" --to-command="awk -e '/$1/{gsub(\"$1\", \"$m&$f\"); print \"$h\" ENVIRON[\"TAR_FILENAME\"] \"$f:\", \$0}'"	;;
				*.bzip2|*.gzip|*.lzip|*.xzip|*.bz2|*.lz|*.za|*.z|*.zip|*.jar|*.war|*.doc|*.docx)
							zgrep -E -i "$1" "$n"				;;
				*.7z|*.tar.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar|*.z|*.Z)
							7z x -so "$n" | egrep -i "$1" -	;;
				*.rar)		unrar -p "$n" | egrep -i "$1" -	;;
				*.bz|*.bzip|*.bz2|*.bzip2)
							bzcat "$n" | egrep -i "$1" -		;;
				*.lz)		lzgrep -E -i "$1" "$n"				;;
				*.lzma)		lzmagrep -E -i "$1" "$n"			;;
				*.xz)		xzgrep -E -i "$1" "$n"				;;
				*.a|*.ar|*.lib)  ar -p | egrep -i "$1" -		;;
				*)			egrep -i "$1" "$n"				;;
			esac
		else
			echo "error unknown"
			return 1
		fi
	done
}
## recursively grep any archives and plaintext within a target directory defaulting to pwd
function ragrep () {
	if [ -z "$1" ]; then
		echo "Usage: agrep pattern [file.archive [file2.archive ,..]]"
		return 1
	else
		if [ -z "$2" ]; then
			t="."
		else
			t="$2"
		fi
		find "$t" -type f | awk '{print $1}' | sort -u | sed -e "s/^/'/;s/$/'/" | agrep "$1"
	fi
}

#### quick greping function for tarball-type archives
function grep-archive() {
	for i in $(tar -tzf "$1"); do results=$(tar -Oxzf "$1" "$i" | grep --label="$i" -H "$2") && echo "$results"; done
}

## count number of files in a directory defaulting to pwd
countfiles() { 
    n="$(ls -a $1 | wc -l)"; 
    echo "$n files in $1";
}

## create directory and change pwd to created directory
mkcd() { mkdir -p $1; cd $1 }

## swap names of two files
nameswap() {
	local TMPFILE=tmp.$$
	mv "$1" $TMPFILE
	mv "$2" "$1"
	mv $TMPFILE "$2"
}


##IMPORTANT NOTE::
##THIS FILE WAS LAST SAVED ON A WINDOWS HOST
##IF YOU HAVE COPIED AND PASTED (YANKED AND PUT) FROM IT OR
##ECHO-APPENDED IT TO THE END OF YOUR OWN .bashrc
##IT DOES USE CRLF as EOL delimiter
##IT WILL RETURN A SYNTACICAL ERROR UNTIL YOU REMOVE ALL CARRAIGE RETURNS @EOL
##SO THAT ONLY LINE FEEDS REAMAIN AND IT IS A PROPERLY-FORMATTED UNIX FILE
##OPEN IN VIM::
##vim ~/.bashrc
##:set fileformat=unix
##:wq
##In Notepad++::
##>>EDIT>>EOL CONVERSION>>UNIX (LF)
##IF YOU HAVE FURTHER SYNTACTICAL PROBLEMS WITH YOUR OWN
##.bashrc or .bash_aliases FILES COMMENT OUT LINES UNTIL YOU
##DISCOVER THE ORIGIN OF THE ERROR, DON'T BLAME ME OR ANYONE ELSE
##PRACTICE YOUR OWN GOOD LINEFEED HYGIENE
##dos2unix .bashrc